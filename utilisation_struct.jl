#=

Exercice : Arbre des d√©pendances de modules

Dans l'univers du d√©veloppement logiciel, il est courant de travailler avec des modules qui d√©pendent les uns des autres. Tes talents de Julia sont donc sollicit√©s pour cr√©er un programme qui manipule les d√©pendances de modules.

Voici la t√¢che :

√âcris un programme en Julia qui d√©finit un module comme une structure comprenant un nom et une liste de d√©pendances (les noms des modules dont il d√©pend). Puis, impl√©mente les fonctions suivantes :

ajouter_module(modules, nom, d√©pendances): ajoute un nouveau module (si ce module n'existe pas d√©j√†) √† une collection existante de modules.
retirer_module(modules, nom): retire un module de la collection, s'il existe, et toutes les d√©pendances qui pointent vers lui.
afficher_d√©pendances(modules, nom): affiche la liste des d√©pendances pour un module donn√©.
afficher_modules(modules): affiche tous les modules dans la collection avec leurs d√©pendances.

Pour corser un peu le d√©fi :

Tu peux t'assurer que lors de l'ajout d'un module, si les d√©pendances mentionn√©es n'existent pas, elles soient cr√©√©es sans d√©pendances.
Si tu retires un module, v√©rifie √©galement que les modules qui d√©pendent uniquement de ce module soient √©galement retir√©s ou leurs d√©pendances mises √† jour.
G√®re les erreurs potentielles comme les noms de modules invalides.

Cet exercice te permet de travailler avec des collections, des structures, des cha√Ænes de caract√®res et plus encore. Tu apprendras √©galement √† g√©rer la complexit√© au fur et √† mesure que le graphe des d√©pendances se complexifie.

Que la force des algos soit avec toi, loocist ! Et si jamais tu te sens perdu dans la for√™t des arbres binaires, n'h√©site pas √† envoyer un signal de d√©tresse ! üå≤üì°

=#

# D√©finition de la structure mutable pour un module
mutable struct MonModule
    nom::String
    d√©pendances::Vector{String}
end

# Fonction pour ajouter un module √† la collection
function ajouter_module(modules::Dict{String, MonModule}, nom::String, d√©pendances::Vector{String})
    # Mettre √† jour les d√©pendances si le module existe d√©j√†
    if haskey(modules, nom)
        module_existant = modules[nom]
        module_existant.d√©pendances = unique(vcat(module_existant.d√©pendances, d√©pendances))
    else
        # Sinon, cr√©er un nouveau module
        modules[nom] = MonModule(nom, d√©pendances)
    end

    # S'assurer que toutes les d√©pendances existent comme modules
    for dep in d√©pendances
        if !haskey(modules, dep)
            modules[dep] = MonModule(dep, [])
        end
    end
end

# Fonction pour afficher tous les modules avec leurs d√©pendances
function afficher_modules(modules::Dict{String, MonModule})
    for (nom, _module) in modules
        println("MonModule $nom avec d√©pendances: $(_module.d√©pendances)")
    end
end

# Fonction pour retirer un module de la collection et ses d√©pendances
function retirer_module(modules::Dict{String, MonModule}, nom::String)
    if haskey(modules, nom)
        # R√©cup√©rer le module √† retirer
        module_a_retirer = modules[nom]

        # Retirer le module de la collection
        delete!(modules, nom)

        # Retirer toutes les d√©pendances qui pointent vers le module
        for (nom_module, _module) in modules
            if nom in _module.d√©pendances
                _module.d√©pendances = filter(x -> x != nom, _module.d√©pendances)
            end
        end
    end
end

# Fonction pour afficher les d√©pendances d'un module donn√©
function afficher_d√©pendances(modules::Dict{String, MonModule}, nom::String)
    if haskey(modules, nom)
        module_cible = modules[nom]
        println("D√©pendances du module $nom:")
        println(module_cible.d√©pendances)
    else
        println("Le module $nom n'existe pas.")
    end
end

# Fonction principale pour tester les fonctionnalit√©s
function main()
    modules = Dict{String, MonModule}()

    ajouter_module(modules, "A", ["B", "C"])
    ajouter_module(modules, "B", ["C"])
    ajouter_module(modules, "C", ["D"])
    ajouter_module(modules, "D", ["A"])

    println("Modules initiaux:")
    afficher_modules(modules)
    println("Les d√©pendances de A sont:")
    afficher_d√©pendances(modules, "A")

    retirer_module(modules, "A")

    println("Modules apr√®s retrait de A:")
    afficher_modules(modules)
    println("Les d√©pendances de A sont:")
    afficher_d√©pendances(modules, "A")


end

# Ex√©cuter la fonction principale
main()
